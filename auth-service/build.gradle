plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.liquibase.gradle' version '2.1.0'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

group = 'ru.andersenlab.authenticationservice'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    versions = [
            mapstruct     : '1.5.5.Final',
            postgresql    : '42.7.3',
            liquibase     : '4.28.0',
            icu4j         : '75.1',
            passay        : '1.5.0',
            lombok        : '1.18.30',
            securityCrypto: '5.8.0'
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation "org.springframework.security:spring-security-crypto:${versions.securityCrypto}"
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    implementation "org.postgresql:postgresql:${versions.postgresql}"
    implementation "org.liquibase:liquibase-core:${versions.liquibase}"
    implementation "com.ibm.icu:icu4j:${versions.icu4j}"
    implementation "org.passay:passay:${versions.passay}"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/domain/**',
                            '**/config/**',
                            '**/model/**',
                            '**/AuthenticationServiceApplication.class',
                    ])
                }))
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/domain/**',
                        '**/config/**',
                        '**/model/**',
                        '**/AuthenticationServiceApplication.class'
                ])
            })
    )
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}
